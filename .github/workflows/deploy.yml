
name: Node.js CI

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: self-hosted
    steps:
      
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Node.js
        run: | 
          curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
          sudo apt-get install -y nodejs
          node --version
          npm --version
      - name: Install docker
        run: |
            sudo apt-get update -y
            sudo apt install docker.io -y 
            sudo usermod -aG docker $USER


  

  Installing_pm2_and_deploy_application:
   needs: [build]
   runs-on: self-hosted
   steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present
      - run: pm2 start index.js
      - name: Configure Nginx
        run: |
          sudo rm /etc/nginx/sites-enabled/default || true
          echo "server {
              listen 80;
              location / {
                  proxy_pass http://localhost:3000;
              }
          }" | sudo tee /etc/nginx/sites-available/node-app
          sudo ln -s /etc/nginx/sites-available/node-app /etc/nginx/sites-enabled/
          sudo systemctl restart nginx
      
#    steps:
#     - name: Checkout code
#       uses: actions/checkout@v3
#     - name: PM2 installation & Verify
#       run: |
#         sudo npm install -g pm2
#         pm2 --version || true
#     - name: Stop existing PM2 processes
#       run: |
#         cd /home/ubuntu/actions-runner/_work/node_project/node_project
#         pm2 delete all || true
#     - name: Start application with PM2
#       run: |
#         cd /home/ubuntu/actions-runner/_work/node_project/node_project
#         nohup pm2 start index.js --name "my-node-app" &
#     - name: Check application status
#       run: |
#            pm2 status
#            pm2 list
           
      


#   Create_Docker_image:
#    needs: [Installing_pm2_and_deploy_application]
#    runs-on: self-hosted
#    steps: 
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: build image
#        run: |           
#             sudo docker build /home/ubuntu/actions-runner/_work/node_project/node_project --tag my-node-app
#      - name: check docker images
#        run: |           
#           sudo docker images
   
#   Pushing_Docker_image_in_jfrog:
#    needs: Create_Docker_image
#    runs-on: self-hosted
#    steps:
#     - name: Checkout code
#       uses: actions/checkout@v2
#     - name: Push Docker image
#       run: |
#         sudo chmod 777 /var/run/docker.sock
#         docker login -umalvinder@arintech.in -p ${{ secrets.DOCKER_PASSWORD }} malvinder.jfrog.io
#         docker tag my-node-app:latest malvinder.jfrog.io/my-jfrog-repository/my-node-app:latest
#         docker push malvinder.jfrog.io/my-jfrog-repository/my-node-app:latest
        
#   AWS_login:
#    needs: [Pushing_Docker_image_in_jfrog]
#    runs-on: self-hosted
#    steps:
#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-east-1
#         run: aws s3 ls
#   Jfrog_ECS_Integration: 
#    needs: [AWS_login]
#    runs-on: self-hosted
#    steps:
#       - uses: actions/checkout@v2
#       - name: Deploy the application to AWS ECS
#         uses: aws-actions/ecs-deploy@v1
#         with:
#           cluster-name: my-cluster
#           task-definition: my-app
#           image: my-app:latest
#           region: us-east-1
   
      
